---
import type { i18nTranslations } from "@/../types/types";
import ButtonCustomized from "./ButtonCustomized.astro";

const data: i18nTranslations = Astro.props.data;
---

<!-- Contacto -->
<h1 id="contact" class="text-center text-2xl font-bold mb-3">{data.contact.title}</h1>
<form class="flex flex-col gap-4 w-full max-w-md mb-28" id="formEmail">
  <div class="flex flex-col gap-2">
    <label for="email" class="font-medium">{data.contact.formEmail}</label>
    <input
      id="email"
      name="email"
      class="p-2 border border-gray-300 rounded-md bg-gray-700 dark:bg-gray-50 light:bg-red-500 dark:text-black text-white"
    />
  </div>

  <div class="flex flex-col gap-2">
    <label for="mensaje" class="font-medium">{data.contact.formMessage}</label>
    <textarea
      id="mensaje"
      name="mensaje"
      rows="4"
      class="p-2 border border-gray-300 rounded-md resize-none bg-gray-700 dark:bg-gray-50 dark:text-black text-white"
    ></textarea>
  </div>

  <ButtonCustomized>
    {data.contact.formSubmit}
  </ButtonCustomized>
</form>

<script>
  import toast from "solid-toast";
  import { FormEnum, FormEnumEnglish } from "@/../types/formEnum.ts";

  // Obtenemos el formulario y el boton de enviar
  const form = document.getElementById("formEmail") as HTMLFormElement;
  const submitButton = form?.querySelector('button[type="submit"]');

  // Verificamos el idioma
  const formEnum = document.documentElement.lang === "es" ? FormEnum : FormEnumEnglish;

  // Agregamos un evento al formulario
  if (form) {
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      // Deshabilitamos el boton de enviar
      if (submitButton instanceof HTMLButtonElement) submitButton.disabled = true;
      // Mostrar toast de carga
      const loadingToastId = toast.loading("Ejemplo");

      try {
        // Validaciones
        if (form.email.value === "") throw new Error(formEnum.EMPTY_EMAIL);
        if (form.mensaje.value === "") throw new Error(formEnum.EMPTY_MESSAGE);

        // Enviamos la peticion POST a el enpoint /api/resend para enviar el mensaje
        const data = {
          email: form.email.value,
          message: form.mensaje.value,
        };
        const response = await fetch("/api/resend", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        // Procesar la respuesta
        if (response.ok) {
          toast.success(formEnum.MESSAGE_SENT, {
            id: loadingToastId,
            duration: 3000,
          });
        } else {
          throw new Error(formEnum.MESSAGE_ERROR);
        }
        // Vaciamos el formulario
        form.reset();
      } catch (error) {
        console.error(error);
        if (error instanceof Error) {
          toast.error(error.message, {
            id: loadingToastId,
            duration: 3000,
          });
        } else {
          toast.error(formEnum.MESSAGE_ERROR, {
            id: loadingToastId,
            duration: 3000,
          });
        }
      } finally {
        if (submitButton instanceof HTMLButtonElement) submitButton.disabled = false;
      }
    });
  }
</script>
