---
import type { i18nTranslations } from "@/../types/types";
const data: i18nTranslations = Astro.props.data;
---

<div class="absolute left-10">
  <svg
    id="hamburgerBtn"
    xmlns="http://www.w3.org/2000/svg"
    fill="none"
    viewBox="0 0 24 24"
    stroke-width="1.5"
    stroke="currentColor"
    class="h-10 w-10 sm:hidden cursor-pointer"
  >
    <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
  </svg>

  <dialog
    id="hamburgerModal"
    class="fixed left-0 w-80 h-full z-50 bg-whitePal p-0 border-none m-0 backdrop:bg-blackPal backdrop:bg-opacity-50 text-blackPal dark:text-whitePal dark:bg-blackPal"
  >
    <div class="h-full overflow-hidden">
      <ul class="flex flex-col items-center justify-start h-full mt-10">
        <li class="my-2 text-lg nav-item">
          <a href="#profile" class="block px-4 py-2 transition-colors duration-200 hover:text-purplePal outline-none">
            {data.profile.title}
          </a>
        </li>
        <li class="my-2 text-lg nav-item">
          <a href="#projects" class="block px-4 py-2 transition-colors duration-200 hover:text-purplePal outline-none">
            {data.projects.title}
          </a>
        </li>
        <li class="my-2 text-lg nav-item">
          <a
            href="#experiencie"
            class="block px-4 py-2 transition-colors duration-200 hover:text-purplePal outline-none"
          >
            {data.experience.title}
          </a>
        </li>
        <li class="my-2 text-lg nav-item">
          <a href="#contact" class="block px-4 py-2 transition-colors duration-200 hover:text-purplePal outline-none">
            {data.contact.title}
          </a>
        </li>
      </ul>
    </div>
  </dialog>
</div>

<style>
  #hamburgerModal {
    top: 10dvh;
    transition: top 0.3s;
  }

  #hamburgerModal.scrolled {
    top: 8dvh;
  }

  @keyframes slideDown {
    from {
      transform: translateX(-100%);
    }
    to {
      transform: translateX(0);
    }
  }

  @keyframes slideUp {
    from {
      transform: translateX(0);
    }
    to {
      transform: translateX(-100%);
    }
  }

  @keyframes bgDown {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes bgUp {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  #hamburgerModal::backdrop {
    animation: bgDown 0.3s ease-in-out forwards;
  }

  #hamburgerModal.closing::backdrop {
    animation: bgUp 0.3s ease-in-out forwards;
  }

  #hamburgerModal[open] {
    animation: slideDown 0.3s ease-in-out forwards;
  }

  #hamburgerModal.closing {
    animation: slideUp 0.3s ease-in-out forwards;
  }
</style>

<script>
  function disableScroll() {
    // Guardar la posición actual del scroll
    const scrollY = window.scrollY;
    // Calcular el ancho de la barra de scroll antes de bloquear
    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
    // Guardar la posición en un atributo de datos en el body
    document.body.dataset.scrollPosition = scrollY.toString();
    // Aplicar un padding-right igual al ancho de la barra de scroll para evitar el salto
    document.body.style.paddingRight = `${scrollbarWidth}px`;
    document.body.style.position = "fixed";
    document.body.style.top = `-${scrollY}px`;
    document.body.style.width = "100%";
    document.body.style.overflow = "hidden";
  }

  // Función para restaurar el scroll
  function enableScroll() {
    const scrollY = document.body.style.top;
    document.body.style.position = "";
    document.body.style.top = "";
    document.body.style.width = "";
    document.body.style.paddingRight = ""; // Eliminar el padding
    document.body.style.overflow = "";
    // Obtener la posición guardada y restaurarla
    const savedPosition = parseInt(scrollY || "0") * -1;
    window.scrollTo({
      top: savedPosition,
      behavior: "instant",
    });
  }

  function closeModalWithAnimation() {
    if (hamburgerModal) {
      // Devolbemos el scroll para que pueda ir a las distintas secciones
      enableScroll();

      // Añadir clase para la animación de cierre
      hamburgerModal.classList.add("closing");

      // Esperar a que termine la animación antes de cerrar el modal
      setTimeout(() => {
        hamburgerModal.close();
        hamburgerModal.classList.remove("closing");
        // Restaurar el scroll del body
      }, 300); // Mismo tiempo que la duración de la animación (0.3s)
    }
  }

  // EVENTOS
  const hamburgerBtn = document.getElementById("hamburgerBtn");
  const hamburgerModal = document.getElementById("hamburgerModal") as HTMLDialogElement;

  // Abrir el modal al hacer clic en el botón de hamburguesa
  hamburgerBtn?.addEventListener("click", () => {
    if (hamburgerModal) {
      hamburgerModal.showModal();
      // Prevenir el scroll en el body cunado el modal está abierto
      disableScroll();
    }
  });

  // Cerrar el modal al hacer clic fuera de él
  hamburgerModal?.addEventListener("click", (event) => {
    // Cerrar solo cunado se hace clic fuera del contenido del modal
    const rect = hamburgerModal.getBoundingClientRect();
    // Verificar si el clic está dentro del modal
    const isInDialog =
      rect.top <= event.clientY &&
      event.clientY <= rect.top + rect.height &&
      rect.left <= event.clientX &&
      event.clientX <= rect.left + rect.width;
    // Si no está dentro del modal, cerrarlo
    if (!isInDialog) closeModalWithAnimation();
  });

  // Cerrar el modal al hacer clic en un enlace dentro de él
  document.querySelectorAll(".nav-item a").forEach((item) => {
    item.addEventListener("click", (event) => {
      const targetId = item.getAttribute("href");

      if (targetId === null) return;

      closeModalWithAnimation();

      // Desplazarse suavemente a la sección correspondiente
      const targetElement = document.querySelector(targetId);
      if (targetElement) {
        event.preventDefault();
        targetElement.scrollIntoView({ behavior: "smooth" });
      }
    });
  });
</script>
