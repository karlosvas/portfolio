---
import type { i18nTranslations } from "@/../types/types";
const data: i18nTranslations = Astro.props.data;

// Formateo de la descripcion para que se vea bien en el frontend
const formatDescription = (desc: string) => {
  return desc
    .split(".")
    .map((sentence) => sentence.trim())
    .filter((sentence) => sentence)
    .join(".\n");
};
---

<div id="experiencie" class="w-3/4 2xl:w-1/2 flex flex-col justify-center items-center mb-40 xl:px-40">
  <h1 class="text-2xl font-bold mb-3">
    {data.experience.title}
  </h1>
  <p style="white-space: pre-line; pt-3 text-pretty">
    {formatDescription(data.experience.description)}
  </p>
  <br />
  <div class="w-full flex flex-row justify-center align-middle items-center mx-5 flex-wrap">
    <img src="/svg/languajes/typescript.svg" class="m-1 mx-5 h-20 w-14" />
    <img src="/svg/languajes/cpp.svg" class="m-1 mx-5 h-20 w-14" />
    <img src="/svg/languajes/java.svg" class="m-1 mx-5 h-20 w-14" />
    <img src="/svg/languajes/astro.svg" class="m-1 mx-5 mt-4 h-16 w-14" />
    <img src="/svg/languajes/react.svg" class="m-1 mx-5 h-20 w-14" />
    <img id="unrealLogo" class="m-1 mx-5 h-20 w-14" />
  </div>
  <br />
  <p style="white-space: pre-line; pt-3 text-pretty">
    {data.experience.technologies}
  </p>
  <br />
  <div class="w-full flex flex-row justify-center align-middle items-center flex-wrap">
    <img src="/svg/technologies/cloudflare.svg" class="m-1 mx-5 h-20 w-14" />
    <img src="/svg/technologies/firebase.svg" class="m-1 mx-5 h-20 w-14" />
    <img src="/svg/technologies/git.svg" class="m-1 mx-5 h-20 w-14" />
    <img src="/svg/technologies/mongo.svg" class="m-1 mx-5 h-14 w-14" />
    <img src="/svg/technologies/tailwind.svg" class="m-1 mx-5 h-20 w-14" />
    <img src="/svg/technologies/vercel.svg" class="m-1 mx-5 h-20 w-14" />
  </div>
  <br />
</div>

<script>
  const logo = document.getElementById("unrealLogo") as HTMLImageElement;

  // Function to update the logo based on dark mode
  const updateLogo = () => {
    const isDarkMode = document.documentElement.classList.contains("dark");
    logo.src = isDarkMode ? "/svg/languajes/unreal-white.svg" : "/svg/languajes/unreal-dark.svg";
  };

  // Initial check
  updateLogo();

  // Observe changes to the class attribute of <html>
  const observer = new MutationObserver(() => {
    updateLogo();
  });

  observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });

  // Clean up observer when the component is removed
  window.addEventListener("beforeunload", () => observer.disconnect());
</script>
